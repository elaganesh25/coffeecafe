name: CodeCompile-SonarCodeScan-CodeBuild&Push-VulScan-Deploy

on:
#  push:
#    branches: [ "main" ]
   workflow_dispatch:


jobs:
  compile:
    runs-on: self-hosted-image
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }} |
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test
      
  security-check:
    runs-on: self-hosted-image
    needs: compile

    steps:
	  - name: Checkout Code
      uses: actions/checkout@v4
	  
	  - name: Build an image from Dockerfile
      run: |
          docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
      with:
        image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
        format: table
        exit-code: 0
        ignore-unfixed: true
		    output: 'trivy-results.sarif'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
	 - name: Upload Trivy scan results to GitHub Security tab
     uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

   - name: Gitleaks Installation
      run: sudo apt install gitleaks -y
   - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json || true    


  Sonar_Scan:
    name: SonarQube
    runs-on: self-hosted-image
    needs: security-check
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup Python
      uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
    - name: Install tox and any other packages
      run: pip install tox
    - name: Run tox
      run: tox -e py
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0 # See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 60
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  buils_docker_image_and_push:
    runs-on: self-hosted-image
    needs: build_project_and_sonar_scan
	
    steps:
    - uses: actions/checkout@v4
	
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: elaganesh25/self-hosted-image:latest
        file: ./Dockerfile

    deploy_to_kubernetes:
    runs-on: self-hosted-image
    needs: buils_docker_image_and_push
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
		
    - name: Set up kubectl
      uses: aws-action/setup-kubectl@v3
      with:
        version: latest
		
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
